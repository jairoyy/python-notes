oop's concept:

     Like other programming languages, python also will support object-oriented programming (OOP) to create reusable code.
     object-oriented programming concepts in python to improve code efficiency by creating reusable code.
          Classes & Objects 
           Inheritance 
           Encapsulation 
           Abstraction 
           Polymorphism 

Class:
The class comprises data members such as constructors, properties, attributes, etc., and member functions.

Create a Class
To create a class in python, you need to use the class keyword as shown below.

 Syntax:
class classname:
   '''Class Creation'''
   properties
   functions
   ....
   ....

Object in Python:
       The object is an instance of a class to access the defined data members. The object will act as a blueprint of a class.

Syntax:
 objectname=classname()

After creating the object for the user class, We can access the class properties as shown below.

 
Class and object Example:
      The class is a combination of data members such as constructors, properties, attributes, etc., and member functions.
       class is a collection of various data members such as properties, attributes, functions, etc., and 
                   the object is an instance of a class to access the defined data members from the class. 
       We can also say the object is the blueprint of a class.

class Myclass:
     x=5
p1=Myclass()
print(p1.x)

output:
5

class user:
   id = 10
   name = "Suresh"

   def userdetails(self):
     '''Function to get user details'''
     print("Id: {}".format(self.id))
     print("Name: {}".format(self.name))

u1 = user()
u1.userdetails()

output:
Id: 10
Name: Suresh

class computer:
    def config(self):
        print("i5,16gb,17B")
com1=computer()
computer.config(com1)

output:
i5,16gb,17B

class computer:
    def config(self):
        print("i5,16gb,17B")
com1=computer()
com2=computer()
computer.config(com1)
computer.config(com2)

output:
i5,16gb,17B
i5,16gb,17B

class computer:
    def config(self):
        print("i5,16gb,17B")
com1=computer()
com2=computer()
com1.config()
com2.config()

output:
i5,16gb,17B
i5,16gb,17B

Constructor in python:
      The constructor is a method that will invoke automatically whenever an instance of a class is created.
      
      To create the constructor in a class, you need to use __init()__ method with self parameter as shown below.
       
       Whenever an instance of a user class is created, the constructor method (__init__) will execute automatically.
    
class user:
    #Constructor method
   def __init__(self):
     print("Invoked Constructor")
p1=user()

output:
Invoked Constructor

class user:
  def __init__(self, uid, uname):
     print("Constructor Invoked")
     self.id = uid
     self.name = uname

   def userdetails(self):
     '''Function to get user details'''
     print("EmpId: {}".format(self.id))
     print("Name: {}".format(self.name))

u1 = user(2, "Rohini")
u1.userdetails()

output:
Constructor Invoked
EmpId: 2
Name: Rohini

Create Empty Class:
          In python, creating a class with no content is not allowed. 
          To create an empty class in python, you need to use the pass statement in a class definition.

class SampleClass:
   pass

Delete Attributes and Objects:
By using the del keyword, you can delete the object attributes as shown below.

class user:
   def __init__(self, id, name):
     self.id = id
     self.name = name
u1 = user(2, "Rohini")
del u1.id
print(u1.id)

output:
Traceback (most recent call last):
   File "D:\pythonclasses.py", line 9, in
      print(u1.id)
AttributeError: 'user' object has no attribute 'id'

Variables in class:
        class variables (also known as class attributes) are shared across all instances (objects) of a class. 
        They belong to the class itself, not to any specific instance.

In Class, attributes can be defined into two parts:

1.Instance variables:   
        If the value of a variable varies from object to object, then such variables are called instance variables.
2.Class Variables:         
        A class variable is a variable that is declared inside of a Class but outside of any instance method or __init__() method.

Create Class Variables:
        A class variable is declared inside of a class, but outside of any instance method or __init__() method.

        You can use the class name or the instance to access a class variable.

Example:

class Student:
    # Class variable
    school_name = 'ABC School '
    
    def __init__(self, name, roll_no):
        self.name = name
        self.roll_no = roll_no

s1 = Student('madhan', 10)
print(s1.name, s1.roll_no, Student.school_name)
s2 = Student('Jenny', 20)
print(s2.name, s2.roll_no, Student.school_name)
 
Output:
madhan 10 ABC School
Jenny 20 ABC School 

class car:
    wheels=4
    def __init__(self):
        self.mil=10
        self.com="BMW"
c1=car()
c1.mil=8
print(c1.com,c1.mil,c1.wheels)
c2=car()
print(c2.com,c2.mil,c2.wheels)

output:
BMW 8 4
BMW 10 4

Accessing Class Variables:
     We can access class variables by class name or object reference, but it is recommended to use the class name.

Example: Access Class Variable in the constructor

class Student:
   school_name = 'ABC School '
   # constructor
   def __init__(self, name):
        self.name = name
        print(self.school_name)
        print(Student.school_name)

# create Object
s1 = Student('Emma')

Output:
ABC School 
ABC School

Modify Class Variables:
      we assign value to a class variable inside the class declaration.
      However, we can change the value of the class variable either in the class or outside of class.
      It is recommended to change the class variable’s value using the class name.

Example:
class car:
    wheels=4
    def __init__(self):
        self.mil=10
        self.com="BMW"
c1=car()
c1.mil=8
car.wheels=5
print(c1.com,c1.mil,c1.wheels)
c2=car()
print(c2.com,c2.mil,c2.wheels)

output:
BMW 8 5
BMW 10 5

Instance Variable:
      The instance variable’s value varies from object to object. 
      Objects do not share instance variables.
      Every object has its copy of the instance attribute.

Example:
class Car:
    # Class variable
    manufacturer = 'BMW'
    def __init__(self, model, price):
        # instance variable
        self.model = model
        self.price = price
# create Object
c1 = Car('x1', 2500)
print(c1.model, c1.price, c1.manufacturer)
 
Output:
x1 2500 BMW

Methods in classes:
Instance methods: 
         Used to access or modify the object state.
         If we use instance variables inside a method, such methods are called instance methods. 
         It must have a self parameter to refer to the current object.

Example:
class Student:
    School='vidyalaya'
    def __init__(self,m1,m2,m3):
        self.m1=m1
        self.m2=m2
        self.m3=m3
    def avg(self):
        return (self.m1+self.m2+self.m3)/3
s1=Student(34,67,32)
s2=Student(1,3,12)
print(s1.avg())
print(s2.avg())

output:
44.333333333333336
5.333333333333333

Class methods: 
     Class methods are methods that are called on the class itself, not on a specific object instance. 
     Therefore, it belongs to a class level, and all class instances share a class method.

      A class method is bound to the class and not the object of the class. 
      It can access only class variables.
      It can modify the class state by changing the value of a class variable that would apply across all the class objects.

     Any method we create in a class will automatically be created as an instance method. 
     We must explicitly tell Python that it is a class method using the @classmethod decorator or classmethod() function.

     Like, inside an instance method, we use the self keyword to access or modify the instance variables. 
     Same inside the class method, we use the cls keyword as a first parameter to access class variables. 
     Therefore the class method gives us control of changing the class state.
       
      To make a method as class method, add @classmethod decorator before the method definition, and add cls as the first parameter to the method.
      The @classmethod decorator is a built-in function decorator. 
      we use the @classmethod decorator to declare a method as a class method. 
      The @classmethod decorator is an expression that gets evaluated after our function is defined.

class Student:
    School='vidyalaya'
    def __init__(self,m1,m2,m3):
        self.m1=m1
        self.m2=m2
        self.m3=m3
    def avg(self):
        return (self.m1+self.m2+self.m3)/3
    @classmethod
    def info(cls):
        return  cls.School
s1=Student(34,67,32)
s2=Student(1,3,12)
print(s1.avg())
print(s2.avg())
print(Student.info())
 
output:
44.333333333333336
5.333333333333333
vidyalaya

Static Method:
       A static method is a general utility method that performs a task in isolation. 
       A static method is bound to the class and not the object of the class. Therefore, we can call it using the class name.
       A static method doesn’t have access to the class and instance variables because it does not receive an implicit first argument like self and cls. 
       Therefore it cannot modify the state of the object or class.

class Student:
    School='vidyalaya'
    def __init__(self,m1,m2,m3):
        self.m1=m1
        self.m2=m2
        self.m3=m3
    def avg(self):
        return (self.m1+self.m2+self.m3)/3
    @classmethod
    def getschool(cls):
        return  cls.School
    @staticmethod
    def info():
        print("this is student class")
s1=Student(34,67,32)
s2=Student(1,3,12)
print(s1.avg())
print(s2.avg())
print(Student.getschool())
Student.info()

output:
44.333333333333336
5.333333333333333
vidyalaya
This is student class

INNER CLASS:
         A class defined inside another class is known as an inner class in Python. 
         Sometimes inner class is also called nested class. 
         If the inner class is instantiated, the object of inner class can also be used by the parent class. 
         Object of inner class becomes one of the attributes of the outer class Inner class automatically inherits the attributes of the outer class without formally establishing inheritance.

Syntax:
class outer:
   def __init__(self):
      pass
   class inner:
      def __init__(self):
         pass


An inner class lets you group classes. One of the advantages of nesting classes is that it becomes easy to understand which classes are related. The inner class has a local scope. It acts as one of the attributes of the outer class.

Example:
   In the following code, we have student as the outer class and subjects as the inner class. 
   The __init__() constructor of student initializes name attribute and an instance of subjects class. 
   On the other hand, the constructor of inner subjects class initializes two instance variables sub1, sub2.

   A show() method of outer class calls the method of inner class with the object that has been instantiated.

class student:
   def __init__(self):
      self.name = "Ashish"
      self.subs = self.subjects()
      return
   def show(self):
      print ("Name:", self.name)
      self.subs.display()
   class subjects:
      def __init__(self):
         self.sub1 = "Phy"
         self.sub2 = "Che"
         return
      def display(self):
         print ("Subjects:",self.sub1, self.sub2)
         
s1 = student()
s1.show()
 
output:
Name: Ashish
Subjects: Phy Che

class student:
   def __init__(self,name,rollno):
      self.name = name
      self.rollno=rollno
      self.lap = self.Laptop()
      return
   def show(self):
      print ( self.name,self.rollno)
      self.lap.display()
   class Laptop:
      def __init__(self):
         self.brand = "HP"
         self.cpu = "i5"
         self.ram=8
         return
      def display(self):
         print ("Subjects:",self.brand, self.cpu,self.ram)
         
s1 = student('navin',2)
s2=student('Jenny',3)
s1.show()
s2.show()

output:
navin 2
Subjects: HP i5 8
Jenny 3
Subjects: HP i5 8

