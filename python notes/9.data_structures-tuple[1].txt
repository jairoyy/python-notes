Tuple:
   Tuple is one of the built-in data types in Python. 
   A Python tuple is a sequence of comma separated items, enclosed in parentheses (). The items in a Python tuple need not be of same data type.

example: 
tup1 = ("Rohan", "Physics", 21, 69.75)
tup2 = (1, 2, 3, 4, 5)
tup3 = ("a", "b", "c", "d")
tup4 = (25.50, True, -55, 1+2j)

 tuple is a sequence data type. It is an ordered collection of items. Each item in the tuple has a unique position index, starting from 0.

In C/C++/Java array, the array elements must be of same type. On the other hand, Python tuple may have objects of different data types.

    Python tuple and list both are sequences. 
    One major difference between the two is, Python list is mutable, whereas tuple is immutable. 
    Although any item from the tuple can be accessed using its index, and cannot be modified, removed or added.

Tuple Operations
    Tuple is a sequence.
    Hence, we can concatenate two tuples with + operator and concatenate multiple copies of a tuple with "*" operator. 
    The membership operators "in" and "not in" work with tuple object.

Python Expression	    Results	                Description
(1, 2, 3) + (4, 5, 6)	 (1, 2, 3, 4, 5, 6)	          Concatenation
('Hi!',) * 4	         ('Hi!', 'Hi!', 'Hi!', 'Hi!')	  Repetition
_______________________________________________________________________________________________
Accessing tuple elements:

    Tuple is a sequence. Each object in the list is accessible with its index. 
  The index starts from "0". Index or the last item in the tuple is "length-1".
    To access values in tuples, use the square brackets for slicing along with the index or indices to obtain value available at that index.

tup1 = ("Roshini", "Physics", 21, 69.75)
tup2 = (1, 2, 3, 4, 5)

print ("Item at 0th index in tup1tup2: ", tup1[0])
print ("Item at index 2 in list2: ", tup2[2])

 output :

Item at 0th index in tup1: Roshini
Item at index 2 in tup2: 3

Example:
Python  allows negative index to be used with any sequence type. The "-1" index refers to the last item in the tuple.

tup1 = ("a", "b", "c", "d")
tup2 = (25.50, True, -55, 1+2j)
print ("Item at 0th index in tup1: ", tup1[-1])
print ("Item at index 2 in tup2: ", tup2[-3])

 output :

Item at 0th index in tup1: d
Item at index 2 in tup2: True

Extracting a Subtuple from a Tuple
The slice operator extracts a subtuple from the original tuple.

Subtuple = tup1[i:j]
Parameters
i − index of the first item in the subtuple

j − index of the item next to the last in the subtuple

This will return a slice from ith to (j-1)th items from the tup1.

Example :

tup1 = ("a", "b", "c", "d")
tup2 = (25.50, True, -55, 1+2j)

print ("Items from index 1 to 2 in tup1: ", tup1[1:3])
print ("Items from index 0 to 1 in tup2: ", tup2[0:2])

 output :

Items from index 1 to 2 in tup1: ('b', 'c')
Items from index 0 to 1 in tup2: (25.5, True)

Example :
While slicing, both operands "i" and "j" are optional. If not used, "i" is 0 and "j" is the last item in the tuple. Negative index can be used in slicing.

tup1 = ("a", "b", "c", "d")
tup2 = (25.50, True, -55, 1+2j)
tup4 = ("Roshini", "Physics", 21, 69.75)
tup3 = (1, 2, 3, 4, 5)

print ("Items from index 1 to last in tup1: ", tup1[1:])
print ("Items from index 0 to 1 in tup2: ", tup2[:2])
print ("Items from index 2 to last in tup3", tup3[:3])
print ("Items from index 0 to index last in tup4", tup4[:])

 output :

Items from index 1 to last in tup1: ('b', 'c', 'd')
Items from index 0 to 1 in tup2: (25.5, True)
Items from index 2 to last in tup3: (1,2,3)
Items from index 0 to index last in tup4: ('Roshini', 'Physics', 21, 69.75)
_______________________________________________________________________________________________
Update tuple:

 Tuple is an immutable data type.
   An immutable object cannot be modified once it is created in the memory.

Example :
If we try to assign a new value to a tuple item with slice operator, Python raises TypeError. 

tup1 = ("a", "b", "c", "d")
tup1[2] = 'Z'
print ("tup1: ", tup1)

 output :
Traceback (most recent call last):
 File "C:\Users\mlath\examples\main.py", line 2, in <module>
  tup1[2] = 'Z'
  ~~~~^^^
TypeError: 'tuple' object does not support item assignment
Hence, it is not possible to update a tuple. Therefore, the tuple class doesn't provide methods for adding, inserting, deleting, sorting items from a tuple object, as the list class.
_______________________________________________________________________________________________
Change Tuple Values:

   Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.
   But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.

x = ("health", "bat", "hide")
y = list(x)
y[1] = "kiwi"
x = tuple(y)
print(x)

output:
("health", "kiwi", "hide")
_______________________________________________________________________________________________
Add Items:

   Since tuples are immutable, they do not have a built-in append() method, but there are other ways to add items to a tuple.

1. Convert into a list: Just like the workaround for changing a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.

thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.append("orange")
thistuple = tuple(y)
print(thistuple)

output:
('apple', 'banana', 'cherry', 'orange')

2. Add tuple to a tuple. 
  You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:

Example:
Create a new tuple with the value "orange", and add that tuple:

thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y
print(thistuple)

output:
('apple', 'banana', 'cherry', 'orange')
_______________________________________________________________________________________________
Remove Items:
   
   We cannot remove items in a tuple.
   Tuples are unchangeable, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items:

Example:
thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.remove("apple")
thistuple = tuple(y)

output:
('banana', 'cherry')

Example:
The del keyword can delete the tuple completely:

thistuple = ("apple", "banana", "cherry")
del thistuple
print(thistuple) #this will raise an error because the tuple no longer exists
_______________________________________________________________________________________________
Unpack a tuple elements:

The term "unpacking" refers to the process of parsing tuple items in individual variables.

 t1 = (5,7)          #t1=(5,)----->this also tuple
 #t1 = x,y
# type (t1)
print(type(t1))

t1 = ("x","y")         
t1 = "x","y"
# type (t1)
print(type(t1)

output:
<class 'tuple'>

Example :
To store tuple items in individual variables, use multiple variables on the left of assignment operator, 

tup1 = (10,20,30)
x, y, z = tup1
print ("x: ", x, "y: ", "z: ",z)

 output :
x: 10 y: 20 z: 30

Example :
If the number of variables is more or less than the length of tuple, Python raises a ValueError.

tup1 = (10,20,30)
x, y = tup1
x, y, p, q = tup1
 
output :
 x, y = tup1
  ^^^^
ValueError: too many values to unpack (expected 2)
  x, y, p, q = tup1
  ^^^^^^^^^^
ValueError: not enough values to unpack (expected 4, got 3)
In such a case, the "*" symbol is used for unpacking. Prefix "*" to "y", as shown below −

tup1 = (10,20,30)
x, *y = tup1
print ("x: ", "y: ", y)

 output :
x: y: [20, 30]
The first value in tuple is assigned to "x", and rest of items to "y" which becomes a list.

Example :
In this example, the tuple contains 6 values and variables to be unpacked are 3. We prefix "*" to the second variable.

tup1 = (10,20,30, 40, 50, 60)
x, *y, z = tup1
print ("x: ",x, "y: ", y, "z: ", z)

output :
x: 10 y: [20, 30, 40, 50] z: 60

Example :
What if we add "*" to the first variable?

tup1 = (10,20,30, 40, 50, 60)
*x, y, z = tup1
print ("x: ",x, "y: ", y, "z: ", z)

 output :
x: [10, 20, 30, 40] y: 50 z: 60
_______________________________________________________________________________________________
tuple using loop:
   We can traverse the items in a tuple with Python's for loop construct. 
      The traversal can be done, using tuple as an iterator or with the help of index.

Syntax:
for obj in tuple:
   . . .
   . . .

Example :

thistuple = (10,20,30)
for x in thistuple:
  print(x)

output:
10
20
30

Use the range() and len() functions to create a suitable iterable.

Example:
Print all items by referring to their index number:

thistuple = (10,1,5,40,78,89)
for i in range(len(thistuple)):
  print(thistuple[i])

output:
10
1
5
40
78
89

Using a While Loop:

  You can loop through the tuple items by using a while loop. 
  Using the len() function to determine the length of the tuple, then start at 0 and loop your way through the tuple items by referring to their indexes.
  Remember to increase the index by 1 after each iteration.

Example
Print all items, using a while loop to go through all the index numbers:

thistuple = ("age", "bat", "digit")
i = 0
while i < len(thistuple):
  print(thistuple[i])
  i = i + 1

output:
age
bat
digit
_______________________________________________________________________________________________
Join tuple:
   A Tuple is classified as a sequence type object. It is a collection of items, which may be of different data types, with each item having a positional index starting with 0.

In Python, a Tuple is an immutable object. Hence, it is not possible to modify the contents of a tuple one it is formed in the memory.

However, you can use different ways to join two Python tuples.

Example :
All the sequence type objects support concatenation operator, with which two lists can be joined.

T1 = (10,20,30,40)
T2 = ('one', 'two', 'three', 'four')
T3 = T1+T2
print ("Joined Tuple:", T3)

 output:
Joined Tuple: (10, 20, 30, 40, 'one', 'two', 'three', 'four')

Example :
You can also use the augmented concatenation operator with the "+=" symbol to append T2 to T1

T1 = (10,20,30,40)
T2 = ('one', 'two', 'three', 'four')
T1+=T2
print ("Joined Tuple:", T1)

Example :
 The same result can be obtained by using the extend() method. 
   Here, we need cast the two tuple objects to lists, extend so as to add elements from one list to another, and convert the joined list back to a tuple.

T1 = (10,20,30,40)
T2 = ('one', 'two', 'three', 'four')
L1 = list(T1)
L2 = list(T2)
L1.extend(L2)
T1 = tuple(L1)
print ("Joined Tuple:", T1)

output:
Joined Tuple: (10, 20, 30, 40, 'one', 'two', 'three', 'four')

Example :
Python's built-in sum() function also helps in concatenating tuples. We use an expression

sum((t1, t2), ())
The elements of the first tuple are appended to an empty tuple first, and then elements from second tuple are appended and returns a new tuple that is concatenation of the two.

T1 = (10,20,30,40)
T2 = ('one', 'two', 'three', 'four')
T3 = sum((T1, T2), ())
print ("Joined Tuple:", T3)

output:
Joined Tuple: (10, 20, 30, 40, 'one', 'two', 'three', 'four')



